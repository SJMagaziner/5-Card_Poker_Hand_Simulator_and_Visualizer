#%% Imports
import itertools
import random
import numpy as np
from PIL import Image
import Deck_of_cards_w_brackets

#%% Variables
# 'C' are clubs, 'D' are diamonds, 'H' are hearts, 'S' are spades
Suit_list = ['C', 'D', 'H', 'S']
Value_list = ['2', '3', '4', '5', '6', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']


#%%  Making a deck using lists instead of new class functions
deck2 = [[v + s] for s in Suit_list for v in Value_list]
 print(deck2)
#%% Draw a random hand
def draw_a_hand():
    random_hand = random.sample(deck2, 5)
    return random_hand

draw_a_hand()


#%% Auto hand-drawer and visualizer

#I NEED TO CHANGE THE IMAGES TO INCLUDE QUOTES IN ORDER TO USE THE LIST THE ENTIRE WAY THROUGH

# Enter the number of hands you desire to generate
how_many_hands = 3

def this_is_your_hand():
    '''This function will randomly assign a given number of 5 card hands and generates images of them'''
    # This draws one's unique 5-card hand
    random_hand = random.sample(deck2, 5)
    print(random_hand)
    # This calls the png file associated with each card the player names
    card1_file = str(random_hand[0]) + '.png'
    card2_file = str(random_hand[1]) + '.png'
    card3_file = str(random_hand[2]) + '.png'
    card4_file = str(random_hand[3]) + '.png'
    card5_file = str(random_hand[4]) + '.png'
    # This employs pillow to read the images to later exract data
    card1 = Image.open(card1_file)
    card2 = Image.open(card2_file)
    card3 = Image.open(card3_file)
    card4 = Image.open(card4_file)
    card5 = Image.open(card5_file)

    # the X.size module extracts the pixel height and width of each image; the later functon defines the new image size
    (width1, height1) = card1.size
    (width2, height2) = card2.size
    (width3, height3) = card3.size
    (width4, height4) = card4.size
    (width5, height5) = card5.size

    result_width = width1 + width2 + width3 + width4 + width5
    result_height = max(height1, height2, height3, height4, height5)

    # The final hand image is a new photo generated by stitching the card files at the appropriate locations within a-
    # 2D box (the new box is a result of the combination of widths)
    hand = Image.new('RGB', (result_width, result_height))
    hand.paste(im=card1, box=(0, 0))
    hand.paste(im=card2, box=(width1, 0))
    hand.paste(im=card3, box=(width1 + width2, 0))
    hand.paste(im=card4, box=(width1 + width2 + width3, 0))
    hand.paste(im=card5, box=(width1 + width2 + width3 + width4, 0))
    return Image._show(hand), list(random_hand)

for i in range(how_many_hands):
    this_is_your_hand()

#%% Assign values

test_hand = ['AH', 'TD', '3C', '5S', 'KS']
test_hand2 = list(random.sample(deck2, 5))

# This dictionary is used to pull from the card call the values of each assigned and suit for use in hand determination
rank_dictionary = {
        '2': 1,
        '3': 2,
        '4': 3,
        '5': 4,
        '6': 5,
        '7': 6,
        '8': 7,
        '9': 8,
        'T': 9,
        'J': 10,
        'Q': 11,
        'K': 12,
        'A': 13
        }
suit_dictionary = {
        'S': 4,
        'H': 3,
        'D': 2,
        'C': 1

        }
print(test_hand2)

# Pulls individual card files from the hands by indexing one card at a time
card1_call = (test_hand2[0])

#Parses out each key character (rank and suit) per card for use in hand ranking determinations
card1_value = (card1_call[0][0:1])
card1_suit = (card1_call[0][1:2])

print(card1_value)
print(card1_suit)
print(dict.get(rank_dictionary, card1_value))
print(dict.get(suit_dictionary, card1_suit))


#%%Check your hand status
def what_do_I_have():
    this_is_your_hand()
    return random_hand


#####Enter hand classifications
#####Find way to determine how many of each hand is given on initial draw

what_do_I_have()